/*
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input and Output options
    input                       = "${launchDir}/assets/input_manifest_cellranger.csv"
    contrast                    = "${launchDir}/assets/contrast_manifest.csv"
    outdir                      = "${launchDir}/results"
    species                     = "hg19"
    run_cellranger              = "Y"
    vars_to_regress             = "percent.mt,nFeature_RNA" // other options include "S.Score,G2M.Score,nCount_RNA"

    // seurat_preprocess.nf
    qc_filtering                = "manual"
    nCount_RNA_max              = 500000
    nCount_RNA_min              = 1000
    nFeature_RNA_max            = 5000
    nFeature_RNA_min            = 200
    percent_mt_max              = 10
    percent_mt_min              = 0
    run_doublet_finder          = "Y"

     // GEX
    seurat_resolution           = "0.1,0.2,0.3,0.5,0.6,0.8,1"
    npcs                        = 20 // number of principle components
    resolution_list             = "0.1,0.2,0.3,0.5,0.6,0.8,1"

    // Other options
    tracedir                   = "${params.outdir}/pipeline_info"

    // References
    // TODO: this path is hard-coded for biowulf, but instead should be modified by the biowulf profile
    genome_dir                 ="/data/CCBR_Pipeliner/db/PipeDB/cellranger_ref/${params.species}"

    // Scripts
    script_functions            = "${projectDir}/bin/scRNA_functions.R"
    script_preprocess           = "${projectDir}/bin/seurat_preprocess.Rmd"
    script_merge                = "${projectDir}/bin/seurat_merge.Rmd"
    script_bc_harmony           = "${projectDir}/bin/batch_correction_harmony.Rmd"
    script_bc_rpca              = "${projectDir}/bin/batch_correction_rpca.Rmd"
    script_bc_cca               = "${projectDir}/bin/batch_correction_cca.Rmd"
    script_scvi                 = "${projectDir}/bin/batch_correction_scvi.Rmd"
    script_liger                = "${projectDir}/bin/batch_correction_liger.Rmd"
    script_bc_integration       = "${projectDir}/bin/batch_correction_integration.Rmd"

    // Max resource options
    max_memory                 = '128.GB'
    max_cpus                   = 48
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = null // overridden by profiles: biowulf, frce, & slurmint
        singularity.pullTimeout = "1h"
        envWhitelist='https_proxy,http_proxy,ftp_proxy,DISPLAY,SLURM_JOBID,SINGULARITY_BINDPATH'
    }
    biowulf {
        includeConfig "conf/biowulf.config"
    }
    slurm {
        includeConfig "conf/slurm.config"
    }
    interactive {
        includeConfig "conf/interactive.config"
    }
    ci_stub {
        includeConfig "conf/ci_stub.config"
    }
    test      { includeConfig 'conf/test.config'      }
    test_pass { includeConfig 'conf/test_pass.config' }
    test_full { includeConfig 'conf/test_full.config' }
    test_pbmc { includeConfig 'conf/test_pbmc.config' }
}

includeConfig 'conf/containers.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'CCBR/SINCLAIR'
    homePage        = 'https://github.com/CCBR/SINCLAIR'
    description     = 'SINgle CelL AnalysIs Resource'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    defaultBranch   = 'main'
}

// Read in modules config
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
