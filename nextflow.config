/*
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input and Output options
    input                       = "${launchDir}/assets/input_manifest_cellranger.csv"
    contrast                    = "${launchDir}/assets/contrast_manifest.csv"
    outdir                      = "${launchDir}/results"
    species                     = "hg19"
    run_cellranger              = "Y"

    // Database paths
    Rlib_dir                    = "/gpfs/gsfs10/users/CCBR_Pipeliner/db/PipeDB/Rlibrary_4.3_scRNA_RHEL8"
    conda_path                  = "/gpfs/gsfs10/users/CCBR_Pipeliner/db/PipeDB/Conda/envs/scvi-env"
    python_path                 = "/gpfs/gsfs10/users/CCBR_Pipeliner/db/PipeDB/Conda/envs/scvi-env/bin"

    // Other options
    tracedir                   = "${params.outdir}/pipeline_info"

    // References
    genome_dir                 ="/data/CCBR_Pipeliner/db/PipeDB/cellranger_ref/${params.species}"

    // R Config
    Rpkg                        = "${baseDir}/conf/Rpack.config"

    // Scripts
    script_functions            = "${baseDir}/bin/scRNA_functions.R"
    script_preprocess           = "${baseDir}/bin/seurat_preprocess.Rmd"
    script_merge                = "${baseDir}/bin/seurat_merge.Rmd"
    script_bc_harmony           = "${baseDir}/bin/batch_correction_harmony.Rmd"
    script_bc_rpca              = "${baseDir}/bin/batch_correction_rpca.Rmd"
    script_bc_cca               = "${baseDir}/bin/batch_correction_cca.Rmd"
    script_scvi                 = "${baseDir}/bin/batch_correction_scvi.Rmd"
    script_liger                = "${baseDir}/bin/batch_correction_liger.Rmd"
    script_bc_integration       = "${baseDir}/bin/batch_correction_integration.Rmd"

    // Max resource options
    max_memory                 = '128.GB'
    max_cpus                   = 48
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    local_biowulf{
        singularity.enabled    = false
        conda.enabled          = true

    }
    biowulf{
        singularity.enabled    = false
        conda.enabled          = true

        // set executor
        process.executor = 'slurm'
    }

    // set docker params
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'

    test       { includeConfig 'conf/test.config'         }
    test_pass  { includeConfig 'conf/test_pass.config'    }
    test_full  { includeConfig 'conf/test_full.config'    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'scRNASeq'
    author          = 'Samantha Sevilla, Nathan Wong, Abdalla Abdelmaksoud, Vishal Koparde'
    homePage        = 'https://github.com/CCBR/TechDev_scRNASeq_Dev2023'
    description     = 'scRNA Seq Pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0'
    defaultBranch   = 'main'
}

// Read in modules config
includeConfig 'conf/modules.config'
includeConfig 'conf/process_params.config'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
