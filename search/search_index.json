{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SINgle CelL AnalysIs Resource (SINCLAIR)","text":"<p>The SINCLAIR pipeline was developed by the CCR Collaborative Bioinformatics Resource as an open-source, reproducible solution for multiple single cell next-generation modalities. It has been developed and tested solely on NIH HPC Biowulf.</p> <p> Overview of Single Cell RNASeq Gene Expression Pipeline</p>"},{"location":"contributing/","title":"Contributing to SINCLAIR","text":""},{"location":"contributing/#proposing-changes-with-issues","title":"Proposing changes with issues","text":"<p>If you want to make a change, it's a good idea to first open an issue and make sure someone from the team agrees that it\u2019s needed.</p> <p>If you've decided to work on an issue, assign yourself to the issue so others will know you're working on it.</p>"},{"location":"contributing/#pull-request-process","title":"Pull request process","text":"<p>We use GitHub Flow as our collaboration process. Follow the steps below for detailed instructions on contributing changes to SINCLAIR.</p> <p></p>"},{"location":"contributing/#clone-the-repo","title":"Clone the repo","text":"<p>If you are a member of CCBR, you can clone this repository to your computer or development environment. Otherwise, you will first need to fork the repo and clone your fork. You only need to do this step once.</p> <pre><code>git clone https://github.com/CCBR/SINCLAIR\n</code></pre> <p>Cloning into 'SINCLAIR'...  remote: Enumerating objects: 1136, done.  remote: Counting objects: 100% (463/463), done.  remote: Compressing objects: 100% (357/357), done.  remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673  Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done.  Resolving deltas: 100% (530/530), done. </p> <pre><code>cd SINCLAIR\n</code></pre>"},{"location":"contributing/#if-this-is-your-first-time-cloning-the-repo-you-may-need-to-install-dependencies","title":"If this is your first time cloning the repo, you may need to install dependencies","text":"<ul> <li> <p>Install nextflow and singularity or docker if needed (biowulf already has these available as modules).</p> </li> <li> <p>Install the python dependencies with pip</p> </li> </ul> <pre><code>pip install .\n</code></pre> <p>If you're developing on biowulf, you can use our shared conda environment which already has these dependencies installed</p> <pre><code>. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n</code></pre> <ul> <li>Install <code>pre-commit</code> if you don't already   have it. Then from the repo's root directory, run</li> </ul> <pre><code>pre-commit install\n</code></pre> <p>This will install the repo's pre-commit hooks.   You'll only need to do this step the first time you clone the repo.</p>"},{"location":"contributing/#create-a-branch","title":"Create a branch","text":"<p>Create a Git branch for your pull request (PR). Give the branch a descriptive name for the changes you will make, such as <code>iss-10</code> if it is for a specific issue.</p> <pre><code># create a new branch and switch to it\ngit branch iss-10\ngit switch iss-10\n</code></pre> <p>Switched to a new branch 'iss-10'</p>"},{"location":"contributing/#make-your-changes","title":"Make your changes","text":"<p>Edit the code, write and run tests, and update the documentation as needed.</p>"},{"location":"contributing/#test","title":"test","text":"<p>Changes to the python package code will also need unit tests to demonstrate that the changes work as intended. We write unit tests with pytest and store them in the <code>tests/</code> subdirectory. Run the tests with <code>python -m pytest</code>.</p> <p>If you change the workflow, please run the workflow with the test profile and make sure your new feature or bug fix works as intended.</p>"},{"location":"contributing/#document","title":"document","text":"<p>If you have added a new feature or changed the API of an existing feature, you will likely need to update the documentation in <code>docs/</code>.</p>"},{"location":"contributing/#commit-and-push-your-changes","title":"Commit and push your changes","text":"<p>If you're not sure how often you should commit or what your commits should consist of, we recommend following the \"atomic commits\" principle where each commit contains one new feature, fix, or task. Learn more about atomic commits here: https://www.freshconsulting.com/insights/blog/atomic-commits/</p> <p>First, add the files that you changed to the staging area:</p> <pre><code>git add path/to/changed/files/\n</code></pre> <p>Then make the commit. Your commit message should follow the Conventional Commits specification. Briefly, each commit should start with one of the approved types such as <code>feat</code>, <code>fix</code>, <code>docs</code>, etc. followed by a description of the commit. Take a look at the Conventional Commits specification for more detailed information about how to write commit messages.</p> <pre><code>git commit -m 'feat: create function for awesome feature'\n</code></pre> <p>pre-commit will enforce that your commit message and the code changes are styled correctly and will attempt to make corrections if needed.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Failed </p> <ul> <li>hook id: trailing-whitespace </li> <li>exit code: 1 </li> <li>files were modified by this hook  &gt;    Fixing path/to/changed/files/file.txt  &gt;    codespell................................................................Passed    style-files..........................................(no files to check)Skipped    readme-rmd-rendered..................................(no files to check)Skipped    use-tidy-description.................................(no files to check)Skipped </li> </ul> <p>In the example above, one of the hooks modified a file in the proposed commit, so the pre-commit check failed. You can run <code>git diff</code> to see the changes that pre-commit made and <code>git status</code> to see which files were modified. To proceed with the commit, re-add the modified file(s) and re-run the commit command:</p> <pre><code>git add path/to/changed/files/file.txt\ngit commit -m 'feat: create function for awesome feature'\n</code></pre> <p>This time, all the hooks either passed or were skipped (e.g. hooks that only run on R code will not run if no R files were committed). When the pre-commit check is successful, the usual commit success message will appear after the pre-commit messages showing that the commit was created.</p> <p>Check for added large files..............................................Passed  Fix End of Files.........................................................Passed  Trim Trailing Whitespace.................................................Passed  codespell................................................................Passed  style-files..........................................(no files to check)Skipped  readme-rmd-rendered..................................(no files to check)Skipped  use-tidy-description.................................(no files to check)Skipped  Conventional Commit......................................................Passed  &gt; [iss-10 9ff256e] feat: create function for awesome feature  1 file changed, 22 insertions(+), 3 deletions(-) </p> <p>Finally, push your changes to GitHub:</p> <pre><code>git push\n</code></pre> <p>If this is the first time you are pushing this branch, you may have to explicitly set the upstream branch:</p> <pre><code>git push --set-upstream origin iss-10\n</code></pre> <p>Enumerating objects: 7, done.  Counting objects: 100% (7/7), done.  Delta compression using up to 10 threads  Compressing objects: 100% (4/4), done.  Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done.  Total 4 (delta 3), reused 0 (delta 0), pack-reused 0  remote: Resolving deltas: 100% (3/3), completed with 3 local objects.  remote:  remote: Create a pull request for 'iss-10' on GitHub by visiting:  remote: https://github.com/CCBR/SINCLAIR/pull/new/iss-10  remote:  To https://github.com/CCBR/SINCLAIR  &gt;  &gt; [new branch] iss-10 -&gt; iss-10  branch 'iss-10' set up to track 'origin/iss-10'. </p> <p>We recommend pushing your commits often so they will be backed up on GitHub. You can view the files in your branch on GitHub at <code>https://github.com/CCBR/SINCLAIR/tree/&lt;your-branch-name&gt;</code> (replace <code>&lt;your-branch-name&gt;</code> with the actual name of your branch).</p>"},{"location":"contributing/#create-the-pr","title":"Create the PR","text":"<p>Once your branch is ready, create a PR on GitHub: https://github.com/CCBR/SINCLAIR/pull/new/</p> <p>Select the branch you just pushed:</p> <p></p> <p>Edit the PR title and description. The title should briefly describe the change. Follow the comments in the template to fill out the body of the PR, and you can delete the comments (everything between <code>&lt;!--</code> and <code>--&gt;</code>) as you go. Be sure to fill out the checklist, checking off items as you complete them or striking through any irrelevant items. When you're ready, click 'Create pull request' to open it.</p> <p></p> <p>Optionally, you can mark the PR as a draft if you're not yet ready for it to be reviewed, then change it later when you're ready.</p>"},{"location":"contributing/#wait-for-a-maintainer-to-review-your-pr","title":"Wait for a maintainer to review your PR","text":"<p>We will do our best to follow the tidyverse code review principles: https://code-review.tidyverse.org/. The reviewer may suggest that you make changes before accepting your PR in order to improve the code quality or style. If that's the case, continue to make changes in your branch and push them to GitHub, and they will appear in the PR.</p> <p>Once the PR is approved, the maintainer will merge it and the issue(s) the PR links will close automatically. Congratulations and thank you for your contribution!</p>"},{"location":"contributing/#after-your-pr-has-been-merged","title":"After your PR has been merged","text":"<p>After your PR has been merged, update your local clone of the repo by switching to the main branch and pulling the latest changes:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>It's a good idea to run <code>git pull</code> before creating a new branch so it will start from the most recent commits in main.</p>"},{"location":"contributing/#helpful-links-for-more-information","title":"Helpful links for more information","text":"<ul> <li>GitHub Flow</li> <li>semantic versioning guidelines</li> <li>changelog guidelines</li> <li>tidyverse code review principles</li> <li>reproducible examples</li> <li>nf-core extensions for VS Code</li> </ul>"},{"location":"release-guide/","title":"Release Guide","text":""},{"location":"release-guide/#how-to-test-a-pre-release-on-biowulf","title":"How to test a pre-release on biowulf","text":"<p>Install the development version of sinclair.</p> <pre><code># activate the conda env for development\n. \"/data/CCBR_Pipeliner/db/PipeDB/Conda/etc/profile.d/conda.sh\"\nconda activate py311\n\n# go to the source on biowulf and update\ncd /data/CCBR_Pipeliner/Pipelines/SINCLAIR/dev\ngit pull\n# optionally switch to different branch if needed\n\n# install the version to a hidden path (e.g. .v0.2.0-dev) in /data/CCBR_Pipeliner/Pipelines/SINCLAIR\ncd ..\npip install ./dev -t ./.v0.2.0-dev\n# add it to your PATH and PYTHONPATH with:\nexport PATH=\"$PATH:/data/CCBR_Pipeliner/Pipelines/SINCLAIR/.v0.2.0-dev/bin/\"\nexport PYTHONPATH=\"$PYTHONPATH:/data/CCBR_Pipeliner/Pipelines/SINCLAIR/.v0.2.0-dev/\"\n</code></pre>"},{"location":"user-guide/contributions/","title":"Contributions","text":"<p>The following members contributed to the development of the scRNA pipeline:</p> <ul> <li>Abdalla Abdelmaksoud</li> <li>Nathan Wong</li> <li>Samantha Sevilla</li> <li>Vishal Koparde</li> </ul> <p>AA, NW, SS contributed to the generating the source code and all members contributed to the main concepts and analysis.</p>"},{"location":"user-guide/differentialExpression/","title":"Running Differential Expression","text":"<p>Adapted from the Seurat differential expression vignette</p> <p>When running differential expression on the Seurat object produced by SINCLAIR, these steps should be followed to ensure an accurate output</p>"},{"location":"user-guide/differentialExpression/#choosing-the-identities","title":"Choosing the identities","text":"<p>Before running any sort of differential expression, the identities of the Seurat object need to be determined and set by the user. For example, the following code will set the Seurat object identities to the clusters found at resolution 0.8:</p> <pre><code>Idents(seuratObject) = \"SCT_snn_res.0.8\"\n</code></pre> <p>The identities are not limited to the clusters; these can be set to any categorical variable in the metadata, including cell types that have been determined by SingleR or classified by the user, cell cycle phase (G1/G2M/S), or experimental group.</p>"},{"location":"user-guide/differentialExpression/#preparing-the-seurat-object-for-differential-expression-with-prepsctfindmarkers","title":"Preparing the Seurat object for differential expression with <code>PrepSCTFindMarkers</code>","text":"<p>After defining the object identities, Seurat requires that when when running differential expression on the SCT assay, the object needs to be prepared with the <code>PrepSCTFindMarkers</code> function:</p> <pre><code>seuratObject = PrepSCTFindMarkers(seuratObject)\n</code></pre> <p>The purpose of the <code>PrepSCTFindMarkers</code> is to use the minimum of the median UMI  of individual objects to appropriately scale the SCT assay prior to differential expressionref.</p>"},{"location":"user-guide/differentialExpression/#finding-differentially-expressed-genes-in-seurat","title":"Finding differentially expressed genes in Seurat","text":"<p>Two options are available when running differential expression through Seurat.</p>"},{"location":"user-guide/differentialExpression/#option-1-running-findmarkersref","title":"Option 1: Running <code>FindMarkers</code>ref","text":"<p>The \"traditional\" method of running differential expression compares two separate categories; this can still be exercised in the presence of more than the two comparison groups of interest. Following the example above, comparing the two largest clusters as determined by Seurat would be run as follows:</p> <pre><code>deGeneList = FindMarkers(seuratObject,ident.1=0,ident.2=1,test.use = \"MAST\")\n</code></pre> <p>By default, Seurat uses the non-parametric Wilcoxon rank-sum test to identify significant genes. The MASTref algorithm uses a hurdle model to account for the sparsity of scRNASeq count matrices, and tends to be more sensitive to likely changes.</p>"},{"location":"user-guide/differentialExpression/#option-2-running-findallmarkersref","title":"Option 2: Running <code>FindAllMarkers</code>ref","text":"<p>When looking to define a set of potential clusters or identities using gene markers, the <code>FindAllMarkers</code> function will run the differential expression by setting the first identity group (equivalent to <code>ident.1</code>) to each cluster in turn and using the remaining clusters as the comparison group (<code>ident.2</code>). <pre><code>markerGeneList = FindAllMarkers(seuratObject,test.use=\"MAST\")\n</code></pre> The resulting list will show the differentially expressed genes that are significantly enriched or depleted for each identity within the preselected category. In essence, <code>FindAllMarkers</code> runs a loop where <code>FindMarkers</code> is run for each individual identity.</p>"},{"location":"user-guide/differentialExpression/#alternative-methods-for-differential-expression","title":"Alternative methods for differential expression","text":"<p>The default values for some of the more frequently altered parameters for the <code>FindMarkers</code> and <code>FindAllMarkers</code> functions are as follows:</p> <p><pre><code>deGenes = FindMarkers(seuratObject, ident.1=NA, ident.2=NA, features=NULL,\n  test.use=\"wilcox,\" logfc.threshold=0.25, min.pct=0.1)\n</code></pre> If <code>ident.1</code> is defined and <code>ident.2</code> is left as a NULL value, the cells not included in <code>ident.1</code> will be used as the comparison, i.e. essentially running a one vs. rest comparison, similar to what is described in <code>FindAllMarkers</code>.</p> <p>The <code>features</code> parameter can take a vector of specified genes and only run differential expression for those genes. Note that this assumes that the gene is not filtered out by any other criteria, such as those listed below. In all other cases, all genes are run through initial filtering and statistical testing.</p> <p>The <code>test.use</code> parameter is used to change the statistical test applied to identify differentially expressed genes. As mentioned above, the MAST algorithm is often applied to single cell data, while other tests that can be applied include <code>\"bimod\"</code>, <code>\"roc\"</code>, <code>\"t\"</code>, <code>\"negbinom\"</code>, <code>\"poisson\"</code>, <code>\"LR\"</code>, and <code>\"DESeq2\"</code>.</p> <p>The <code>logfc.threshold</code> filters out all genes that do not meet a log2 fold change threshold. This is applied to improve the speed of the computation, as those genes that do not meet this value are not subjected to statistical testing. The default threshold value is 0.25, which is roughly a 20% average fold change.</p> <p>The <code>min.pct</code> threshold filters out genes that are not expressed in the fraction of cells below the threshold for both comparison groups. If only one comparison group is below the threshold, the statistics for the gene will still be calculated. The default <code>min.pct</code> threshold is 0.1, or 10%.</p> <p>Since a number of genes will be unaffected by the experiment, a full differential expression list will require setting both <code>logfc.threshold</code> and <code>min.pct</code> to 0, so as to calculate the statistics for less relevant genes. These parameters may also need to be adjusted when selecting specific genes with the <code>features</code> parameter, as any user-defined genes that do not meet the threshold criteria will not be submitted to statistical testing.</p>"},{"location":"user-guide/differentialExpression/#expected-outputs","title":"Expected outputs","text":"<p>The output of the <code>deGeneList</code> variable above will have a table structure resembling the following:</p> p_val avg_log2FC pct.1 pct.2 p_val_adj Tff1 2.27649774378448e-20 0.503646816090369 0.313 0.039 5.15945448651315e-16 Gkn1 2.37538488060338e-18 0.31537227402121 0.23 0.007 5.3835722933995e-14 Gkn2 9.91735374467266e-14 0.238583210040284 0.166 0.004 2.24766905269261e-09 Oaz1 1.26240861948424e-12 0.198987799763473 0.996 0.968 2.86112289519909e-08 Rab5c 3.39748073842636e-12 0.301705843310934 0.645 0.4 7.7000503455695e-08 Rbm3 5.53653902770416e-12 0.226144933696604 0.97 0.893 1.25480120523887e-07 Cfl1 9.22315807122862e-12 0.171800659275371 1 0.982 2.09033654526325e-07 Cd83 2.27101797312635e-10 0.242223105538207 0.849 0.789 5.14703513429356e-06 Tff2 2.66531282660886e-10 0.226607061165825 0.189 0.025 6.04066499022633e-06 <p>The first unlabeled column lists the genes, followed by raw p-value, average log2 fold change, the percentage of cells expressing the gene in populations 1 and 2, and finally the adjusted p-value. The sign of the fold change and the definitions of <code>pct.1</code> and <code>pct.2</code> are defined by the order of groups selected in the <code>FindMarkers</code> call: Positive fold changes indicate enrichment in the first group (i.e. defined as <code>ident.1</code>), as well as the <code>pct.1</code> value</p>"},{"location":"user-guide/differentialExpression/#common-issues-and-questions","title":"Common issues and questions","text":""},{"location":"user-guide/differentialExpression/#why-are-there-so-many-genes-with-extremely-small-p-values","title":"Why are there so many genes with extremely small p-values?","text":"<p>In most circumstances, a small p-value generally indicates that the gene is extremely significant and should not be ignored. However, many of the statistical tests that are designed based on distributions, including MAST, operate under a set of assumptions. With single cell, one of the assumptions that gets violated is an upper limit on the number of replicates included, since each individual cell is treated as a replicate and leads to a comparison of 2 groups with as many as tens of thousands of replicates each.</p> <p>Unfortunately, it falls to the user to determine the relative significance of the genes that are identified as significant by examining the other statistics provided (i.e. <code>avg_log2FC</code> and <code>pct.1</code>/<code>pct.2</code>). Additionally, genes of interest can also be run through the <code>AverageExpression</code> and the <code>FeaturePlot</code> functions to explore the overall expression of the gene in the individual contrast groups. Other approaches, such as pseudobulk differential expression (see below) might be implemented in order to address this p-value phenomenon</p>"},{"location":"user-guide/differentialExpression/#requiring-joinlayers","title":"Requiring <code>JoinLayers</code>","text":"<p>Since version 5, Seurat keeps individual samples as \"layers\" in the S4 data structure. This makes it simpler to apply various functions to each sample, such as SCTransform normalization or variable feature identification, since a single call to the Seurat object will behave like the <code>lapply</code> function in R. However, this also keeps the individual counts tables separate, which makes differential expression nigh impossible. To address this, the user needs to join the layers prior to running differential expression:</p> <pre><code>so_dePrep = JoinLayers(seuratObject)\nso_dePrep = PrepSCTFindMarkers(so_dePrep)\nmarkers = FindAllMarkers(so_dePrep,test.use=\"MAST\")\n</code></pre>"},{"location":"user-guide/differentialExpression/#running-differential-expression-on-subsets-of-cells","title":"Running differential expression on subsets of cells","text":"<p>Oftentimes the user will be interested in examining two different subsets of cells; for example, comparing the two experimental contrast groups in B cells alone. When isolating a group with the subset in question, the user might send a command such as:</p> <pre><code>Bcells = subset(seuratObject,cells=colnames(seuratObject)[which(so$cellType==\"B cells\")])\n</code></pre> <p>However, when running <code>FindMarkers</code> on this subset, the following may be encountered:</p> <pre><code>FindMarkers(Bcells,ident.1=\"group1\",test.use=\"MAST\")\n\nError in FindMarkers.SCTAssay(object = data.use, slot = slot, cells.1 = cells$cells.1,  :\n  Object contains multiple models with unequal library sizes. Run `PrepSCTFindMarkers()` before running `FindMarkers()`.\n</code></pre> <p>In this event, the user should ensure that the subset was extracted from the Seurat object that has already been prepared through <code>PrepSCTFindMarkers</code> to ensure appropriate scaling. The second step is to use a hidden parameter <code>recorrect_umi</code> to tell the program to \"ignore\" the scaling step.</p> <pre><code>FindMarkers(Bcells,ident.1=\"group1\",test.use=\"MAST\", recorrect_umi=FALSE)\n</code></pre> <p>In theory, this flag can also be used in all other steps in order to skip the scaling step for differential expression, but this is generally not recommended.</p>"},{"location":"user-guide/differentialExpression/#pseudobulk-differential-expression","title":"Pseudobulk differential expression","text":"<p>If there are enough individual replicates, a user can convert the single cell dataset into a pseudobulk dataset and treat the individual samples as pooled replicates to be submitted through a standard RNASeq differential expression protocol, such as Limma or DESeq2. This has been explored using the Libra tool and through Seurat using their <code>AggregateExpression</code> function. The results tend to increase the p-values, which subsequently reduces the likelihood of false positives in identifying differentially expressed genes. </p> <p>The main warning when running a pseudobulk approach is to ensure that there are enough samples to warrant aggregation; if only one sample is available per experimental condition, the user will be attempting a 1v1 differential expression design, which is not nearly robust enough to account for any intra-group sample variability.</p> <p> </p> <p>References: <p>1. PrepSCTFindMarkers</p> <p>2. FindMarkers</p> <p>3. FindAllMarkers</p> <p></p> <p>Author: Nathan Wong. January 2023</p>"},{"location":"user-guide/getting-started/","title":"Overview","text":"<p>The scRNA github repository is stored locally, and will be used for project deployment. Multiple projects can be deployed from this one point simultaneously, without concern.</p>"},{"location":"user-guide/getting-started/#1-getting-started","title":"1. Getting Started","text":""},{"location":"user-guide/getting-started/#11-introduction","title":"1.1 Introduction","text":"<p>The scRNA Pipelie beings at various stages, depending on the users needs. The pipeline can begin with GEX FASTQ files, performing cell counting, with 10X Genomic's CellRanger. Then, normalization and pre-processing occurs, using custom R scripts with packages like Seurat. Alternatively the user can begin with .h5 files, beginning the pipeline post-preprocessing. [TODO: add as we go!]</p>"},{"location":"user-guide/getting-started/#12-setup-dependencies","title":"1.2 Setup Dependencies","text":"<p>scRNA has several dependencies listed below. These dependencies can be installed by a sysadmin. All dependencies will be automatically loaded if running from Biowulf.</p> <ul> <li>nextflow: \"nextflow/23.04.1\"</li> <li>cellranger \"cellranger:7.1.0\"</li> <li>R: \"R/4.3\"</li> </ul> <p>Docker containers to run the pipeline are currently in development.</p>"},{"location":"user-guide/getting-started/#13-login-to-the-cluster","title":"1.3 Login to the cluster","text":"<p>scRNA has been exclusively tested on Biowulf HPC. Login to the cluster's head node and move into the pipeline location. <pre><code># ssh into cluster's head node\nssh -Y $USER@biowulf.nih.gov\n</code></pre></p>"},{"location":"user-guide/getting-started/#14-load-an-interactive-session","title":"1.4 Load an interactive session","text":"<p>An interactive session should be started before performing any of the pipeline sub-commands, even if the pipeline is to be executed on the cluster.</p> <pre><code># Grab an interactive node\nsinteractive --time=12:00:00 --mem=8gb  --cpus-per-task=4 --pty bash\n</code></pre>"},{"location":"user-guide/output/","title":"4. Expected Outputs","text":"<p>The following directories are created under the WORKDIR directory:</p> <ul> <li>batch_correct: contains the various RDS files for batch correction methods (CCA, HARMONY, ScVI, RPCA, LIGER) and batch correction report (HTML)</li> <li>cellranger_counts: contains the h5 files, if <code>cellranger count</code> is deployed</li> <li>pipeline_info: contains execution_reports, execution_trace and pipeline_dag files from NextFlow</li> <li>samplesheets: contains the manifests used to identify samples, contrasts, and sample:contrast groupings</li> <li>seurat: contains multiple seurat-generated directories:<ul> <li>preprocess: contains sample level data; both RDS and PDF files from pre-processing</li> <li>merge: contrast grouped, sample level data; both RDS and PDf files of pre-processed, merging</li> </ul> </li> </ul> <pre><code>\u2500 batch_correct\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_cca.rds\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_harmony.rds\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_integration.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_liger.rds\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_rpca.rds\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_batch_correction_scvi.rds\n\u251c\u2500\u2500 cellranger_counts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 sample1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 outs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 filtered_feature_bc_matrix.h5\n\u251c\u2500\u2500 pipeline_info\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 execution_report_2023-09-20_12-45-47.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 execution_timeline_2023-09-20_12-45-47.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 execution_trace_2023-09-20_12-45-47.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pipeline_dag_2023-09-20_12-45-47.svg\n\u251c\u2500\u2500 samplesheets\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 project_contrast_samplesheet.csv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 project_gex_samplesheet.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 project_groups_samplesheet.csv\n\u2514\u2500\u2500 seurat\n    \u251c\u2500\u2500 merge\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 group1-group2_seurat_merged.pdf\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 group1-group2_seurat_merged.rds\n    \u2514\u2500\u2500 preprocess\n        \u251c\u2500\u2500 sample1_seurat_preprocess.pdf\n        \u251c\u2500\u2500 sample1_seurat_preprocess.rds\n</code></pre>"},{"location":"user-guide/preparing-files/","title":"2. Preparing Files","text":"<p>The pipeline is controlled through editing configuration and manifest files. Defaults are found in the /PIPELINEDIR/conf and /PIPELINEDIR/ directories</p> <p> Overview of Single Cell RNASeq Gene Expression Process</p>"},{"location":"user-guide/preparing-files/#21-configs","title":"2.1 Configs","text":"<p>The configuration files control parameters and software of the pipeline. These files are listed below:</p> <ul> <li>nextflow.config</li> <li>conf/base.config</li> <li>conf/modules.config</li> <li>conf/process_params.config</li> <li>conf/Rpack.config</li> </ul>"},{"location":"user-guide/preparing-files/#211-nextflow-config","title":"2.1.1 NextFlow Config","text":"<p>The configuration file dictates the global information to be used during the pipeline. Users can alter the default values, as needed: - input: path to input manifest; example manifests with (<code>input_manifest_cellranger.csv</code>) and without (<code>input_manifest.csv</code>) <code>cellranger</code> are included in assets - contrast: path to contrast manifest; example manifest (<code>contrast_manifest.csv</code>) is included in assets - outdir: path to output dir - species: species [options: hg19, mm10] - run_cellranger: determines whether to run cell ranger; if \"Y\" is selected, expects FQ inputs, if \"N\", expects .h5 inputs [options: \"Y\", \"N\"] - vars_to_regress: a comma separated list of any variables to regress during <code>SCTransform</code> process; [options: \"\", \"percent.mt,nFeature_RNA,S.Score,G2M.Score,nCount_RNA\"]</p>"},{"location":"user-guide/preparing-files/#212-base-config","title":"2.1.2 Base Config","text":"<p>The configuration file dictates submission to Biowulf HPC. There are two different ways to control these parameters - first, to control the default settings, and second, to create or edit individual rules. These parameters should be edited with caution, after significant testing.</p>"},{"location":"user-guide/preparing-files/#213-modules-config","title":"2.1.3 Modules Config","text":"<p>The configuration file dictates process-specific processing parameters, including:</p> <ul> <li>the version of each software or program that is being used in the pipeline</li> <li>output location and file names</li> <li>additional arguments to be passed to the process</li> </ul>"},{"location":"user-guide/preparing-files/#214-r-package-config","title":"2.1.4 R Package Config","text":"<p>The configuration file dictates which R libraries, and which versions, are loaded into the accompanying R script</p>"},{"location":"user-guide/preparing-files/#213-process-parameters","title":"2.1.3 Process Parameters","text":"<p>The configuration file dictates process-specific user parameters, which varies for each process. Users can choose varied resolution values or QC methods, for example.</p>"},{"location":"user-guide/preparing-files/#22-preparing-manifests","title":"2.2 Preparing Manifests","text":"<p>There are two manifests, which are required. These files describe information on the samples and desired contrasts. These files are:</p> <ul> <li>/assets/input_manifest.csv</li> <li>/assets/contrast_manifest.csv</li> </ul>"},{"location":"user-guide/preparing-files/#221-input-manifest","title":"2.2.1 Input Manifest","text":"<p>This manifest will include information to sample level information. It includes the following column headers:</p> <ul> <li>masterID: This is the biological sample ID; duplicates are allowed in this column</li> <li>uniqueID: This is a unique sample level ID; duplicates are not allowed in this column</li> <li>groupID: This is the groupID which should match to the <code>contrast_manifest</code>; duplicates are allowed in this column</li> <li>dataType: This is the datatype for the input sample; options are 'gex' 'atac' 'vdj'</li> <li>input_dir: This is the input directory for the data files of the sample type (IE \"/path/to/sample1/fastq\")</li> </ul> <p>An example sampleManifest file is shown below:</p> <p>| masterID   | uniqueID | groupID | dataType                                                              | input_dir                                                         | | ---------- | -------- | ------- | --------------------------------------------------------------------- | ----------------------------------------------------------------- | ------------------------------------------------------- | | WB_Lysis_1 | sample1  | group1  | gex                                                                   | /data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample1 | | WB_Lysis_1 | sample2  | group1  | gex                                                                   | /data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample2 | | WB_Lysis_2 | sample3  | group2  | gex                                                                   | /data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample3 | | WB_Lysis_2 | sample4  | group2  | gex                                                                   | /data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample4 | | WB_Lysis_3 | sample5  | group3  | gex,/data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample5           | | WB_Lysis_1 | sample6  | group1  | atac                                                                  | /data/CCBR_Pipeliner/Pipelines/TechDev_scRNASeq_Dev2023/test_dir/ | WB_Lysis_Granulocytes_3p_Introns_8kCells_fastqs/sample1 |</p>"},{"location":"user-guide/preparing-files/#222-contrast-manifest","title":"2.2.2 Contrast Manifest","text":"<p>This manifest will include sample information to performed differential comparisons. A few requirements:</p> <ul> <li>groups listed must match groups within the <code>input_manifest</code> groupID column</li> <li>headers should be included for the max number of contrasts. In the example below, the second contrast contains 3 groups, and so the header includes contrast1-contrast3</li> <li>multiple groups can be added by increasing the header and adding additional contrasts, as needed</li> </ul> <p>An example contrast file:</p> contrast1 contrast2 contrast3 group1 group2 group1 group2 group3"},{"location":"user-guide/run/","title":"3. Running the Pipeline","text":""},{"location":"user-guide/run/#31-pipeline-overview","title":"3.1 Pipeline Overview","text":"<p>The Nextflow workflow can be run as follows: <pre><code>nextflow run main.nf \\\n    -entry $datatype \\\n    -profile biowulf \\\n    --input assets/input_manifest.csv \\\n    --contrast assets/contrast_manifest.csv \\\n    --outdir /data/sevillas2/scRNA_test \\\n    --species $species \\\n    $args\n</code></pre></p>"},{"location":"user-guide/run/#32-commands-explained","title":"3.2 Commands explained","text":"<p>The following explains each of the command options:</p> <ul> <li>entry: accepts the datatype to be used; IE gex</li> <li>profile: how to run the processes; IE biowulf singularity, docker</li> <li>input: input_manifest.csv location</li> <li>contrast: contrast_manifest.csv location</li> <li>outdir: complete path to the output dir</li> <li>species: species to be used</li> <li>run_cellranger: whether or not to run cellranger on dataset; IE Y, N</li> <li>args: any additional arguments; IE --stub-run</li> </ul>"},{"location":"user-guide/run/#33-typical-workflow","title":"3.3 Typical Workflow","text":"<p>A typical command workflow, running the pipeline for the first time locally, is as follows: <pre><code>nextflow run main.nf \\\n    -entry gex \\\n    -profile biowulf \\\n    --input assets/input_manifest.csv \\\n    --contrast assets/contrast_manifest.csv \\\n    --outdir /path/to/scRNA_test \\\n    --species hg19\n</code></pre></p> <p>A typical command workflow, running the pipeline for a repeated time locally, running cellranger, is as follows: <pre><code>nextflow run main.nf -resume \\\n    -entry gex \\\n    -profile biowulf \\\n    --run_cellranger Y \\\n    --input assets/input_manifest.csv \\\n    --contrast assets/contrast_manifest.csv \\\n    --outdir /path/to/scRNA_test \\\n    --run_cellranger Y \\\n    --species hg19\n</code></pre></p> <p>A typical command workflow, running the pipeline in a <code>dryrun mode</code>, without running cellranger, is as follows: <pre><code>nextflow run main.nf \\\n    -entry gex \\\n    -profile biowulf \\\n    --run_cellranger Y \\\n    --input assets/input_manifest.csv \\\n    --contrast assets/contrast_manifest.csv \\\n    --outdir /path/to/scRNA_test \\\n    --species hg19 \\\n    --run_cellranger N \\\n    --stub-run\n</code></pre></p> <p>Alternatively a script was created to run the pipeline, which takes the following flags: - species: hg19 - datatype: GEX - outDir: /path/to/output/dir - resume: Y or N - run_cellranger: Y or N - stubrun: Y or N</p> <p>Examples: <pre><code># run GEX on test data, for the first time\nsh run_scRNA.sh hg19 GEX N /path/to/output/dir\n\n# first pass, with and without cellranger\nsh run_scRNA.sh hg19 GEX /path/to/output/dir N Y N\nsh run_scRNA.sh hg19 GEX /path/to/output/dir N Y N\n\n# resume, with and without cellranger\nsh run_scRNA.sh hg19 GEX /path/to/output/dir Y Y N\nsh run_scRNA.sh hg19 GEX /path/to/output/dir Y N N\n\n# first pass, with cellranger, with and without a dryrun\nsh run_scRNA.sh hg19 GEX /path/to/output/dir N Y Y\nsh run_scRNA.sh hg19 GEX /path/to/output/dir N Y N\n</code></pre></p>"},{"location":"user-guide/test-info/","title":"5. Running Test Data","text":"<p>Isolation protocol: CG000392 RevA: Isolation of Leukocytes, Bone Marrow and Peripheral Blood Mononuclear Cells for Single Cell RNA Sequencing - Whole Blood Lysis for Granuloctyes track. Whole transcriptome/Gene Expression libraries were generated as described in the Chromium Next GEM Single Cell 3' Reagent Kits v3.1 (Dual Index) User Guide (CG000204 Rev D). TUTORIAL: https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/tutorials/neutrophils SOURCE: https://www.10xgenomics.com/resources/datasets/whole-blood-rbc-lysis-for-pbmcs-neutrophils-granulocytes-3-3-1-standard</p>"},{"location":"user-guide/test-info/#wb_1","title":"WB_1","text":"<ul> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L001_I1_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L001_I2_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L001_R1_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L001_R2_001.fastq.gz</li> </ul>"},{"location":"user-guide/test-info/#wb_2","title":"WB_2","text":"<ul> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L002_I1_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L002_I2_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L002_R1_001.fastq.gz</li> <li>WB_Lysis_Granulocytes_3p_Introns_8kCells_S1_L002_R2_001.fastq.gz</li> </ul>"},{"location":"user-guide/test-info/#wb_3-and-wb_4-are-copies","title":"WB_3 and WB_4 are copies","text":"<ul> <li>WB_1 \u2192 WB_3</li> <li>WB_2 \u2192 WB_4</li> </ul>"},{"location":"user-guide/test-info/#samples-were-then-subsampled-with-a-set-seed","title":"samples were then subsampled with a set seed","text":"<ul> <li>WB_1 \u2192 sample1,sample2 \u2192 s100</li> <li>WB_2 \u2192 sample3,sample4 \u2192 s101</li> <li>WB_3 \u2192 sample5,sample6 \u2192 s102</li> <li>WB_4 \u2192 sample7,sample8 \u2192 s103</li> </ul>"},{"location":"user-guide/test-info/#grouping-tests-should-be","title":"grouping tests should be","text":"<ul> <li>group1,group2</li> <li>group3,group4</li> <li>group1+group3,group2+group4</li> </ul>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>Recommended steps to troubleshoot the pipeline.</p>"},{"location":"user-guide/troubleshooting/#11-email","title":"1.1 Email","text":"<p>Check your email for an email regarding pipeline failure. You will receive an email from slurm@biowulf.nih.gov with the subject: Slurm Job_id=[#] Name=CARLISLE Failed, Run time [time], FAILED, ExitCode 1</p>"},{"location":"user-guide/troubleshooting/#12-review-the-log-files","title":"1.2 Review the log files","text":"<p>Review the logs in two ways:</p> <ol> <li>Review the master slurm file: This file will be found in the <code>/path/to/results/dir/</code> and titled <code>slurm-[jobid].out</code>. Reviewing this file will tell you what rule errored, and for any local SLURM jobs, provide error details</li> <li>Review the individual rule log files: After reviewing the master slurm-file, review the specific rules that failed within the <code>/path/to/results/dir/logs/</code>. Each rule will include a <code>.err</code> and <code>.out</code> file, with the following formatting: <code>{rulename}.{masterjobID}.{individualruleID}.{wildcards from the rule}.{out or err}</code></li> </ol>"},{"location":"user-guide/troubleshooting/#13-restart-the-run","title":"1.3 Restart the run","text":"<p>After addressing the issue, unlock the output directory, perform another dry-run and check the status of the pipeline, then resubmit to the cluster. <pre><code>nextflow run main.nf \\\n    -entry $datatype \\\n    -profile biowulf \\\n    --input assets/input_manifest.csv \\\n    --contrast assets/contrast_manifest.csv \\\n    --outdir /data/sevillas2/scRNA_test \\\n    --species $species \\\n    $args\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#14-contact-information","title":"1.4 Contact information","text":"<p>If after troubleshooting, the error cannot be resolved, or if a bug is found, please create an issue and send and email to Samantha Chill.</p>"}]}